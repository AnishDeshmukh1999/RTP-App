// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Message_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Message_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Message_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Message_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Message_2eproto;
namespace Message {
class ID3v2Tag;
struct ID3v2TagDefaultTypeInternal;
extern ID3v2TagDefaultTypeInternal _ID3v2Tag_default_instance_;
class Request;
struct RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class Response;
struct ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
}  // namespace Message
PROTOBUF_NAMESPACE_OPEN
template<> ::Message::ID3v2Tag* Arena::CreateMaybeMessage<::Message::ID3v2Tag>(Arena*);
template<> ::Message::Request* Arena::CreateMaybeMessage<::Message::Request>(Arena*);
template<> ::Message::Response* Arena::CreateMaybeMessage<::Message::Response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Message {

enum Request_RequestType : int {
  Request_RequestType_GET_ID3_TAG = 0,
  Request_RequestType_START_STREAMING = 1,
  Request_RequestType_STOP_STREAMING = 2,
  Request_RequestType_Request_RequestType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Request_RequestType_Request_RequestType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Request_RequestType_IsValid(int value);
constexpr Request_RequestType Request_RequestType_RequestType_MIN = Request_RequestType_GET_ID3_TAG;
constexpr Request_RequestType Request_RequestType_RequestType_MAX = Request_RequestType_STOP_STREAMING;
constexpr int Request_RequestType_RequestType_ARRAYSIZE = Request_RequestType_RequestType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Request_RequestType_descriptor();
template<typename T>
inline const std::string& Request_RequestType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Request_RequestType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Request_RequestType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Request_RequestType_descriptor(), enum_t_value);
}
inline bool Request_RequestType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Request_RequestType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Request_RequestType>(
    Request_RequestType_descriptor(), name, value);
}
enum Response_ResponseType : int {
  Response_ResponseType_SUCCESS = 0,
  Response_ResponseType_Response_ResponseType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Response_ResponseType_Response_ResponseType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Response_ResponseType_IsValid(int value);
constexpr Response_ResponseType Response_ResponseType_ResponseType_MIN = Response_ResponseType_SUCCESS;
constexpr Response_ResponseType Response_ResponseType_ResponseType_MAX = Response_ResponseType_SUCCESS;
constexpr int Response_ResponseType_ResponseType_ARRAYSIZE = Response_ResponseType_ResponseType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Response_ResponseType_descriptor();
template<typename T>
inline const std::string& Response_ResponseType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Response_ResponseType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Response_ResponseType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Response_ResponseType_descriptor(), enum_t_value);
}
inline bool Response_ResponseType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Response_ResponseType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Response_ResponseType>(
    Response_ResponseType_descriptor(), name, value);
}
// ===================================================================

class Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Message.Request) */ {
 public:
  inline Request() : Request(nullptr) {}
  ~Request() override;
  explicit PROTOBUF_CONSTEXPR Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Request(const Request& from);
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request& operator=(Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Request& from) {
    Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Message.Request";
  }
  protected:
  explicit Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Request_RequestType RequestType;
  static constexpr RequestType GET_ID3_TAG =
    Request_RequestType_GET_ID3_TAG;
  static constexpr RequestType START_STREAMING =
    Request_RequestType_START_STREAMING;
  static constexpr RequestType STOP_STREAMING =
    Request_RequestType_STOP_STREAMING;
  static inline bool RequestType_IsValid(int value) {
    return Request_RequestType_IsValid(value);
  }
  static constexpr RequestType RequestType_MIN =
    Request_RequestType_RequestType_MIN;
  static constexpr RequestType RequestType_MAX =
    Request_RequestType_RequestType_MAX;
  static constexpr int RequestType_ARRAYSIZE =
    Request_RequestType_RequestType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  RequestType_descriptor() {
    return Request_RequestType_descriptor();
  }
  template<typename T>
  static inline const std::string& RequestType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RequestType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RequestType_Name.");
    return Request_RequestType_Name(enum_t_value);
  }
  static inline bool RequestType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      RequestType* value) {
    return Request_RequestType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
  };
  // .Message.Request.RequestType type = 1;
  void clear_type();
  ::Message::Request_RequestType type() const;
  void set_type(::Message::Request_RequestType value);
  private:
  ::Message::Request_RequestType _internal_type() const;
  void _internal_set_type(::Message::Request_RequestType value);
  public:

  // @@protoc_insertion_point(class_scope:Message.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2eproto;
};
// -------------------------------------------------------------------

class ID3v2Tag final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Message.ID3v2Tag) */ {
 public:
  inline ID3v2Tag() : ID3v2Tag(nullptr) {}
  ~ID3v2Tag() override;
  explicit PROTOBUF_CONSTEXPR ID3v2Tag(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ID3v2Tag(const ID3v2Tag& from);
  ID3v2Tag(ID3v2Tag&& from) noexcept
    : ID3v2Tag() {
    *this = ::std::move(from);
  }

  inline ID3v2Tag& operator=(const ID3v2Tag& from) {
    CopyFrom(from);
    return *this;
  }
  inline ID3v2Tag& operator=(ID3v2Tag&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ID3v2Tag& default_instance() {
    return *internal_default_instance();
  }
  static inline const ID3v2Tag* internal_default_instance() {
    return reinterpret_cast<const ID3v2Tag*>(
               &_ID3v2Tag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ID3v2Tag& a, ID3v2Tag& b) {
    a.Swap(&b);
  }
  inline void Swap(ID3v2Tag* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ID3v2Tag* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ID3v2Tag* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ID3v2Tag>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ID3v2Tag& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ID3v2Tag& from) {
    ID3v2Tag::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ID3v2Tag* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Message.ID3v2Tag";
  }
  protected:
  explicit ID3v2Tag(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentifierFieldNumber = 1,
    kDataFieldNumber = 6,
    kMajorversionFieldNumber = 2,
    kMinorversionFieldNumber = 3,
    kFlagsFieldNumber = 4,
    kSTagsizeFieldNumber = 5,
  };
  // bytes identifier = 1;
  void clear_identifier();
  const std::string& identifier() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_identifier(ArgT0&& arg0, ArgT... args);
  std::string* mutable_identifier();
  PROTOBUF_NODISCARD std::string* release_identifier();
  void set_allocated_identifier(std::string* identifier);
  private:
  const std::string& _internal_identifier() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_identifier(const std::string& value);
  std::string* _internal_mutable_identifier();
  public:

  // bytes data = 6;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // uint32 majorversion = 2;
  void clear_majorversion();
  uint32_t majorversion() const;
  void set_majorversion(uint32_t value);
  private:
  uint32_t _internal_majorversion() const;
  void _internal_set_majorversion(uint32_t value);
  public:

  // uint32 minorversion = 3;
  void clear_minorversion();
  uint32_t minorversion() const;
  void set_minorversion(uint32_t value);
  private:
  uint32_t _internal_minorversion() const;
  void _internal_set_minorversion(uint32_t value);
  public:

  // uint32 flags = 4;
  void clear_flags();
  uint32_t flags() const;
  void set_flags(uint32_t value);
  private:
  uint32_t _internal_flags() const;
  void _internal_set_flags(uint32_t value);
  public:

  // uint32 s_tagsize = 5;
  void clear_s_tagsize();
  uint32_t s_tagsize() const;
  void set_s_tagsize(uint32_t value);
  private:
  uint32_t _internal_s_tagsize() const;
  void _internal_set_s_tagsize(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Message.ID3v2Tag)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identifier_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    uint32_t majorversion_;
    uint32_t minorversion_;
    uint32_t flags_;
    uint32_t s_tagsize_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2eproto;
};
// -------------------------------------------------------------------

class Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Message.Response) */ {
 public:
  inline Response() : Response(nullptr) {}
  ~Response() override;
  explicit PROTOBUF_CONSTEXPR Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Response(const Response& from);
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Response& default_instance() {
    return *internal_default_instance();
  }
  enum DataCase {
    kId3V2Tag = 1,
    kResponse = 2,
    DATA_NOT_SET = 0,
  };

  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Response& from) {
    Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Message.Response";
  }
  protected:
  explicit Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Response_ResponseType ResponseType;
  static constexpr ResponseType SUCCESS =
    Response_ResponseType_SUCCESS;
  static inline bool ResponseType_IsValid(int value) {
    return Response_ResponseType_IsValid(value);
  }
  static constexpr ResponseType ResponseType_MIN =
    Response_ResponseType_ResponseType_MIN;
  static constexpr ResponseType ResponseType_MAX =
    Response_ResponseType_ResponseType_MAX;
  static constexpr int ResponseType_ARRAYSIZE =
    Response_ResponseType_ResponseType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ResponseType_descriptor() {
    return Response_ResponseType_descriptor();
  }
  template<typename T>
  static inline const std::string& ResponseType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ResponseType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ResponseType_Name.");
    return Response_ResponseType_Name(enum_t_value);
  }
  static inline bool ResponseType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ResponseType* value) {
    return Response_ResponseType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kId3V2TagFieldNumber = 1,
    kResponseFieldNumber = 2,
  };
  // .Message.ID3v2Tag id3v2Tag = 1;
  bool has_id3v2tag() const;
  private:
  bool _internal_has_id3v2tag() const;
  public:
  void clear_id3v2tag();
  const ::Message::ID3v2Tag& id3v2tag() const;
  PROTOBUF_NODISCARD ::Message::ID3v2Tag* release_id3v2tag();
  ::Message::ID3v2Tag* mutable_id3v2tag();
  void set_allocated_id3v2tag(::Message::ID3v2Tag* id3v2tag);
  private:
  const ::Message::ID3v2Tag& _internal_id3v2tag() const;
  ::Message::ID3v2Tag* _internal_mutable_id3v2tag();
  public:
  void unsafe_arena_set_allocated_id3v2tag(
      ::Message::ID3v2Tag* id3v2tag);
  ::Message::ID3v2Tag* unsafe_arena_release_id3v2tag();

  // .Message.Response.ResponseType response = 2;
  bool has_response() const;
  private:
  bool _internal_has_response() const;
  public:
  void clear_response();
  ::Message::Response_ResponseType response() const;
  void set_response(::Message::Response_ResponseType value);
  private:
  ::Message::Response_ResponseType _internal_response() const;
  void _internal_set_response(::Message::Response_ResponseType value);
  public:

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:Message.Response)
 private:
  class _Internal;
  void set_has_id3v2tag();
  void set_has_response();

  inline bool has_data() const;
  inline void clear_has_data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union DataUnion {
      constexpr DataUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::Message::ID3v2Tag* id3v2tag_;
      int response_;
    } data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Request

// .Message.Request.RequestType type = 1;
inline void Request::clear_type() {
  _impl_.type_ = 0;
}
inline ::Message::Request_RequestType Request::_internal_type() const {
  return static_cast< ::Message::Request_RequestType >(_impl_.type_);
}
inline ::Message::Request_RequestType Request::type() const {
  // @@protoc_insertion_point(field_get:Message.Request.type)
  return _internal_type();
}
inline void Request::_internal_set_type(::Message::Request_RequestType value) {
  
  _impl_.type_ = value;
}
inline void Request::set_type(::Message::Request_RequestType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Message.Request.type)
}

// -------------------------------------------------------------------

// ID3v2Tag

// bytes identifier = 1;
inline void ID3v2Tag::clear_identifier() {
  _impl_.identifier_.ClearToEmpty();
}
inline const std::string& ID3v2Tag::identifier() const {
  // @@protoc_insertion_point(field_get:Message.ID3v2Tag.identifier)
  return _internal_identifier();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ID3v2Tag::set_identifier(ArgT0&& arg0, ArgT... args) {
 
 _impl_.identifier_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Message.ID3v2Tag.identifier)
}
inline std::string* ID3v2Tag::mutable_identifier() {
  std::string* _s = _internal_mutable_identifier();
  // @@protoc_insertion_point(field_mutable:Message.ID3v2Tag.identifier)
  return _s;
}
inline const std::string& ID3v2Tag::_internal_identifier() const {
  return _impl_.identifier_.Get();
}
inline void ID3v2Tag::_internal_set_identifier(const std::string& value) {
  
  _impl_.identifier_.Set(value, GetArenaForAllocation());
}
inline std::string* ID3v2Tag::_internal_mutable_identifier() {
  
  return _impl_.identifier_.Mutable(GetArenaForAllocation());
}
inline std::string* ID3v2Tag::release_identifier() {
  // @@protoc_insertion_point(field_release:Message.ID3v2Tag.identifier)
  return _impl_.identifier_.Release();
}
inline void ID3v2Tag::set_allocated_identifier(std::string* identifier) {
  if (identifier != nullptr) {
    
  } else {
    
  }
  _impl_.identifier_.SetAllocated(identifier, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.identifier_.IsDefault()) {
    _impl_.identifier_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Message.ID3v2Tag.identifier)
}

// uint32 majorversion = 2;
inline void ID3v2Tag::clear_majorversion() {
  _impl_.majorversion_ = 0u;
}
inline uint32_t ID3v2Tag::_internal_majorversion() const {
  return _impl_.majorversion_;
}
inline uint32_t ID3v2Tag::majorversion() const {
  // @@protoc_insertion_point(field_get:Message.ID3v2Tag.majorversion)
  return _internal_majorversion();
}
inline void ID3v2Tag::_internal_set_majorversion(uint32_t value) {
  
  _impl_.majorversion_ = value;
}
inline void ID3v2Tag::set_majorversion(uint32_t value) {
  _internal_set_majorversion(value);
  // @@protoc_insertion_point(field_set:Message.ID3v2Tag.majorversion)
}

// uint32 minorversion = 3;
inline void ID3v2Tag::clear_minorversion() {
  _impl_.minorversion_ = 0u;
}
inline uint32_t ID3v2Tag::_internal_minorversion() const {
  return _impl_.minorversion_;
}
inline uint32_t ID3v2Tag::minorversion() const {
  // @@protoc_insertion_point(field_get:Message.ID3v2Tag.minorversion)
  return _internal_minorversion();
}
inline void ID3v2Tag::_internal_set_minorversion(uint32_t value) {
  
  _impl_.minorversion_ = value;
}
inline void ID3v2Tag::set_minorversion(uint32_t value) {
  _internal_set_minorversion(value);
  // @@protoc_insertion_point(field_set:Message.ID3v2Tag.minorversion)
}

// uint32 flags = 4;
inline void ID3v2Tag::clear_flags() {
  _impl_.flags_ = 0u;
}
inline uint32_t ID3v2Tag::_internal_flags() const {
  return _impl_.flags_;
}
inline uint32_t ID3v2Tag::flags() const {
  // @@protoc_insertion_point(field_get:Message.ID3v2Tag.flags)
  return _internal_flags();
}
inline void ID3v2Tag::_internal_set_flags(uint32_t value) {
  
  _impl_.flags_ = value;
}
inline void ID3v2Tag::set_flags(uint32_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:Message.ID3v2Tag.flags)
}

// uint32 s_tagsize = 5;
inline void ID3v2Tag::clear_s_tagsize() {
  _impl_.s_tagsize_ = 0u;
}
inline uint32_t ID3v2Tag::_internal_s_tagsize() const {
  return _impl_.s_tagsize_;
}
inline uint32_t ID3v2Tag::s_tagsize() const {
  // @@protoc_insertion_point(field_get:Message.ID3v2Tag.s_tagsize)
  return _internal_s_tagsize();
}
inline void ID3v2Tag::_internal_set_s_tagsize(uint32_t value) {
  
  _impl_.s_tagsize_ = value;
}
inline void ID3v2Tag::set_s_tagsize(uint32_t value) {
  _internal_set_s_tagsize(value);
  // @@protoc_insertion_point(field_set:Message.ID3v2Tag.s_tagsize)
}

// bytes data = 6;
inline void ID3v2Tag::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& ID3v2Tag::data() const {
  // @@protoc_insertion_point(field_get:Message.ID3v2Tag.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ID3v2Tag::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Message.ID3v2Tag.data)
}
inline std::string* ID3v2Tag::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:Message.ID3v2Tag.data)
  return _s;
}
inline const std::string& ID3v2Tag::_internal_data() const {
  return _impl_.data_.Get();
}
inline void ID3v2Tag::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* ID3v2Tag::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* ID3v2Tag::release_data() {
  // @@protoc_insertion_point(field_release:Message.ID3v2Tag.data)
  return _impl_.data_.Release();
}
inline void ID3v2Tag::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Message.ID3v2Tag.data)
}

// -------------------------------------------------------------------

// Response

// .Message.ID3v2Tag id3v2Tag = 1;
inline bool Response::_internal_has_id3v2tag() const {
  return data_case() == kId3V2Tag;
}
inline bool Response::has_id3v2tag() const {
  return _internal_has_id3v2tag();
}
inline void Response::set_has_id3v2tag() {
  _impl_._oneof_case_[0] = kId3V2Tag;
}
inline void Response::clear_id3v2tag() {
  if (_internal_has_id3v2tag()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.id3v2tag_;
    }
    clear_has_data();
  }
}
inline ::Message::ID3v2Tag* Response::release_id3v2tag() {
  // @@protoc_insertion_point(field_release:Message.Response.id3v2Tag)
  if (_internal_has_id3v2tag()) {
    clear_has_data();
    ::Message::ID3v2Tag* temp = _impl_.data_.id3v2tag_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.data_.id3v2tag_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Message::ID3v2Tag& Response::_internal_id3v2tag() const {
  return _internal_has_id3v2tag()
      ? *_impl_.data_.id3v2tag_
      : reinterpret_cast< ::Message::ID3v2Tag&>(::Message::_ID3v2Tag_default_instance_);
}
inline const ::Message::ID3v2Tag& Response::id3v2tag() const {
  // @@protoc_insertion_point(field_get:Message.Response.id3v2Tag)
  return _internal_id3v2tag();
}
inline ::Message::ID3v2Tag* Response::unsafe_arena_release_id3v2tag() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Message.Response.id3v2Tag)
  if (_internal_has_id3v2tag()) {
    clear_has_data();
    ::Message::ID3v2Tag* temp = _impl_.data_.id3v2tag_;
    _impl_.data_.id3v2tag_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_id3v2tag(::Message::ID3v2Tag* id3v2tag) {
  clear_data();
  if (id3v2tag) {
    set_has_id3v2tag();
    _impl_.data_.id3v2tag_ = id3v2tag;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Message.Response.id3v2Tag)
}
inline ::Message::ID3v2Tag* Response::_internal_mutable_id3v2tag() {
  if (!_internal_has_id3v2tag()) {
    clear_data();
    set_has_id3v2tag();
    _impl_.data_.id3v2tag_ = CreateMaybeMessage< ::Message::ID3v2Tag >(GetArenaForAllocation());
  }
  return _impl_.data_.id3v2tag_;
}
inline ::Message::ID3v2Tag* Response::mutable_id3v2tag() {
  ::Message::ID3v2Tag* _msg = _internal_mutable_id3v2tag();
  // @@protoc_insertion_point(field_mutable:Message.Response.id3v2Tag)
  return _msg;
}

// .Message.Response.ResponseType response = 2;
inline bool Response::_internal_has_response() const {
  return data_case() == kResponse;
}
inline bool Response::has_response() const {
  return _internal_has_response();
}
inline void Response::set_has_response() {
  _impl_._oneof_case_[0] = kResponse;
}
inline void Response::clear_response() {
  if (_internal_has_response()) {
    _impl_.data_.response_ = 0;
    clear_has_data();
  }
}
inline ::Message::Response_ResponseType Response::_internal_response() const {
  if (_internal_has_response()) {
    return static_cast< ::Message::Response_ResponseType >(_impl_.data_.response_);
  }
  return static_cast< ::Message::Response_ResponseType >(0);
}
inline ::Message::Response_ResponseType Response::response() const {
  // @@protoc_insertion_point(field_get:Message.Response.response)
  return _internal_response();
}
inline void Response::_internal_set_response(::Message::Response_ResponseType value) {
  if (!_internal_has_response()) {
    clear_data();
    set_has_response();
  }
  _impl_.data_.response_ = value;
}
inline void Response::set_response(::Message::Response_ResponseType value) {
  _internal_set_response(value);
  // @@protoc_insertion_point(field_set:Message.Response.response)
}

inline bool Response::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void Response::clear_has_data() {
  _impl_._oneof_case_[0] = DATA_NOT_SET;
}
inline Response::DataCase Response::data_case() const {
  return Response::DataCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Message

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Message::Request_RequestType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Message::Request_RequestType>() {
  return ::Message::Request_RequestType_descriptor();
}
template <> struct is_proto_enum< ::Message::Response_ResponseType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Message::Response_ResponseType>() {
  return ::Message::Response_ResponseType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Message_2eproto
